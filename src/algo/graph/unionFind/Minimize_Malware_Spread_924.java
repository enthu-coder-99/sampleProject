package algo.graph.unionFind;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Minimize_Malware_Spread_924 {

  public static void main(String[] args) {
    int[][] graph = new int[][]{{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 1}, {0, 0, 1, 1}};
    int[] initial = new int[]{3, 1};

    graph = new int[][]{{1, 0, 0, 0, 0, 0}, {0, 1, 0, 0, 0, 0}, {0, 0, 1, 0, 0, 0}, {0, 0, 0, 1, 1, 0}, {0, 0, 0, 1, 1, 0}, {0, 0, 0, 0, 0, 1}};
    initial = new int[]{5, 0};
    Minimize_Malware_Spread_924 obj = new Minimize_Malware_Spread_924();
    int ans = obj.minMalwareSpread(graph, initial);
    System.out.println("Ans= " + ans);
  }

  public int minMalwareSpread(int[][] graph, int[] initial) {

    int n = graph[0].length;
    UnionFindTemplate um = new UnionFindTemplate(n);
    Map<Integer, Integer> parentToChildCountMap = new HashMap<>();
    for (int i = 0; i < n; i++) {
      int[] conns = graph[i];
      int conn_i = i;
      for (int j = 0; j < n && j != i; j++) {
        int conn_j = conns[j];
        if (conn_j == 1) {
          um.merge(conn_i, j);
          System.out.println("mergi ng " + conn_i + " and " + j);
        }
      }

      parentToChildCountMap.put(um.findParent(conn_i), parentToChildCountMap.getOrDefault(um.findParent(conn_i), 0) + 1);

    }
    Arrays.sort(initial);
    Map<Integer, Integer> parentToInfectedChildCountMap = new HashMap<>();
    for (int i : initial) {
      int parent = um.findParent(i);
      parentToInfectedChildCountMap.put(parent, parentToInfectedChildCountMap.getOrDefault(parent, 0) + 1);
    }
    int ans_index = -1;
    int ans_group_size = 0;
    for (int i : initial) {
      int parentNodeOfInfected = um.findParent(i);
      int infectedNodesGroupCount = parentToInfectedChildCountMap.get(parentNodeOfInfected);
      if (infectedNodesGroupCount == 1) {
        Integer countNodesInComponent = parentToChildCountMap.getOrDefault(parentNodeOfInfected, -2);
        if (countNodesInComponent > ans_group_size) {
          ans_index = i;
          ans_group_size = countNodesInComponent;
          System.out.println("countNodesInComponent= " + countNodesInComponent + ", ans_group_size= " + ans_group_size + ", ans_index= " + ans_index);
        }
      }
    }
    if (ans_index != -1)
      return ans_index;
    return initial[0];

  }
}