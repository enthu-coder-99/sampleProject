package algo.graph.unionFind;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Minimize_Malware_Spread_924 {

  public static void main(String[] args) {
    int largeNum = 1234567;
    int sum = 0;
    while (largeNum > 0) {
      sum = sum + largeNum % 10;
      largeNum = largeNum / 10;
    }
  }

  public int minMalwareSpread(int[][] graph, int[] initial) {

    int n = graph[0].length;
    UnionFindTemplate um = new UnionFindTemplate(n);
    Map<Integer, Integer> parentTOChildCountMap = new HashMap<>();
    for (int i = 0; i < n; i++) {
      int[] conns = graph[i];
      int conn_i = i;
      for (int j = 0; j < n; j++) {
        if (i == j) continue;
        int conn_j = conns[j];
        if (conn_j == 1) {
          um.merge(conn_i, conn_j);
        }
      }
    }

    Map<Integer, Integer> parentTOInfectedChildCountMap = new HashMap<>();
    for (int i : initial) {
      int parent = um.findParent(i);
      parentTOInfectedChildCountMap.put(parent, parentTOInfectedChildCountMap.getOrDefault(parent, 0) + 1);
    }

    Arrays.sort(initial);
    int ans_index = -1;
    int ans_group_size = -1;

    for (int i : initial) {
      int parentNodeOfInfected = um.findParent(i);
      int groupSize = parentTOInfectedChildCountMap.get(parentNodeOfInfected);
      if (groupSize == 1) {
        continue;
      }
    }
    return ans_index;
  }
}
